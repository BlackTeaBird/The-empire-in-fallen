namespace = civic_events

country_event = {
	id = civic_events.0
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = default
		has_valid_civic = civic_ringworld_start
	}
	immediate = {
		if = {
			limit = {
				capital_scope.solar_system = {
					OR = {
						AND = {
							OR = {
								is_star_class = sc_a
								is_star_class = sc_b
								is_star_class = sc_f
								is_star_class = sc_g
								is_star_class = sc_k
								is_star_class = sc_m
							}
							any_planet = { NOT = { has_planet_flag = temp_save } }
						}
						AND = {
							OR = {
								is_star_class = sc_trinary_1
								is_star_class = sc_trinary_2
								is_star_class = sc_trinary_3
								is_star_class = sc_trinary_4
								is_star_class = sc_binary_5
								is_star_class = sc_binary_6
								is_star_class = sc_binary_7
								is_star_class = sc_binary_8
								is_star_class = sc_binary_9
								is_star_class = sc_binary_10
							}
							any_planet = { has_planet_flag = temp_save }
						}
					}
				}
			}
			capital_scope = { every_planet_army = { remove_army = yes } }
			random_owned_planet ={
				limit = { is_capital = yes }
				owner.capital_scope.solar_system = {
					spawn_megastructure = {
						name = "NAME_Ring_Section_A"
						type = "ring_world_3_intermediate"
						orbit_angle = 0
						orbit_distance = 45
						owner = root
						graphical_culture = root
						location = star
					}
					spawn_megastructure = {
						name = "NAME_Ring_Section_B"
						type = "ring_world_3_intermediate"
						orbit_angle = 90
						orbit_distance = 45
						owner = root
						graphical_culture = root
						location = star
					}
					spawn_megastructure = {
						name = "NAME_Ring_Section_C"
						type = "ring_world_3_intermediate"
						orbit_angle = 180
						orbit_distance = 45
						owner = root
						graphical_culture = root
						location = star
					}
					spawn_megastructure = {
						name = "NAME_Ring_Section_D"
						type = "ring_world_3_intermediate"
						orbit_angle = 270
						orbit_distance = 45
						owner = root
						graphical_culture = root
						location = star
					}
				}
			}
			random_planet_within_border ={
				limit = {
					is_planet_class = pc_ringworld_habitable
				}
				save_event_target_as = ringworld_capital
				set_planet_flag = ringworld_capital
			}
			if = {
				limit = { has_valid_civic = civic_synthetic_evolution }
				random_owned_pop = {
					limit = { NOT = { is_same_species = root } }
					species = {
						create_species = {
							name = this
							plural = this
							namelist = this
							class = MACHINE
							portrait = this
							traits = this
							homeworld = event_target:ringworld_capital
							new_pop_resource_requirement = {
								type = robot_food 
								value = 30.0
							}
							pops_auto_growth = 1.0
							pops_can_reproduce = no
							pops_can_join_factions = no
							pop_maintenance = 1
							can_generate_leaders = no
							pops_have_happiness = no
							consumer_goods = no
							pop_ethics = no
							effect = {
								save_event_target_as = playerspecies_secondary_species
							}
						}
					}
				}
			}
			random_owned_planet = {
				limit = { is_capital = yes }
				save_event_target_as = prevcapital
			}
			if = {
				limit = { owner_species = { OR = { is_species_class = ROBOT is_species_class = ROBOT_GENDER } } }
				create_species = {
					#is_mod = yes
					name = this
					namelist = this
					plural = this
					class = "ROBOT"
					#portrait = "default_robot"
					portrait = this
					traits = this
					homeworld = event_target:ringworld_capital
					new_pop_resource_requirement = {
						type = robot_food
						value = 30.0
					}
					pops_auto_growth = 1.0
					
					pops_can_be_colonizers = yes
					pops_can_migrate = yes
					pops_can_reproduce = no
					pops_can_join_factions = yes
					pop_maintenance = 1
					can_generate_leaders = yes
					pops_can_be_slaves = yes
					pops_have_happiness = yes
					pop_ethics = random	#can also be pop_ethics = { some_ethic some_other_ethic etc }
					effect = { save_event_target_as = playerspecies }
				}
			}
			else = {
				create_species = {
					#is_mod = yes
					name = this
					namelist = this
					plural = this
					class = this
					portrait = this
					traits = this
					homeworld = event_target:ringworld_capital
					effect = { save_event_target_as = playerspecies }
				}
			}
			change_dominant_species = { species = event_target:playerspecies }
			modify_species = {
				species = this
				ideal_planet_class = event_target:prevcapital
				remove_trait = trait_pc_ringworld_habitable_preference
				base = none
			}
			every_owned_leader = { change_species = event_target:playerspecies }
			every_pool_leader = { change_species = event_target:playerspecies }
			random_planet_within_border ={
				limit = {
					is_planet_class = pc_ringworld_habitable
					has_planet_flag = ringworld_capital
				}
				set_owner = root
				set_controller = root
				create_colony = {
					owner = root
					species = root.owner_species
				}
				every_tile = {
					limit = { has_building = yes }
					remove_building =yes
				}
				every_tile = {
					limit = { has_pop = yes }
					kill_pop = yes
				}
				generate_start_buildings_and_blockers = yes
				if = {
					limit = { owner = { NOT = { has_valid_civic = civic_synthetic_evolution } } }
					create_army = {
						owner = root
						species = root.species
						type = "defense_army"
					}
					create_army = {
						owner = root
						species = root.species
						type = "defense_army"
					}
					create_army = {
						owner = root
						species = root.species
						type = "defense_army"
					}
				}
				else_if = {
					limit = { owner = { has_valid_civic = civic_synthetic_evolution } }
					every_tile = {
						limit = { has_building = building_hydroponics_farm_1 }
						remove_building = yes
						set_building = building_power_plant_1
						clear_deposits = yes
						set_deposit = d_energy_deposit
					}
					every_tile = {
						limit = { has_deposit = d_farmland_deposit }
						clear_deposits = yes
						set_deposit = d_energy_deposit
					}
					every_tile = {
						limit = { has_deposit = d_rich_farmland_deposit }
						clear_deposits = yes
						set_deposit = d_rich_energy_deposit
					}
					every_tile = {
						limit = { has_deposit = d_vast_farmland_deposit }
						clear_deposits = yes
						set_deposit = d_vast_energy_deposit
					}
					every_tile = {
						limit = { has_deposit = d_immense_farmland_deposit }
						clear_deposits = yes
						set_deposit = d_immense_energy_deposit
					}
					every_tile = {
						limit = { has_deposit = d_mineral_food_deposit }
						clear_deposits = yes
						set_deposit = d_mineral_deposit
					}
					every_tile = {
						limit = { has_deposit = d_rich_food_mineral_deposit }
						clear_deposits = yes
						set_deposit = d_rich_mineral_deposit
					}
					while = {
						count = 2
						random_tile = {
							limit = { has_building = building_mining_network_1 has_pop = no }
							create_pop = {
								species = event_target:playerspecies_secondary_species
							}
						}
					}
					create_army = {
						owner = root
						species = root.species
						type = "synthetic_defense_army"
					}
					create_army = {
						owner = root
						species = root.species
						type = "synthetic_defense_army"
					}
					create_army = {
						owner = root
						species = root.species
						type = "synthetic_defense_army"
					}
				}
				every_tile = {
					limit = { has_building = yes has_pop = no has_blocker = no}
					create_pop = { 
						species = owner_species
						ethos = random
					}
				}
				while = {
					count = 10
					random_tile = {
						limit = { has_building = no has_blocker = no has_pop = no }			
						set_blocker = tb_ancient_ruins
					}
				}
				set_name = "[ROOT.Capital.GetName]"
				set_capital = yes
			}
			random_owned_leader = {
				limit = { leader_class = governor }
				save_event_target_as = leader_governor
			}
			capital_scope = {
				solar_system = {
					set_asteroid_belt = { radius = 0 }
					random_system_planet = {
						limit = {
							is_planet_class = pc_ringworld_habitable
							has_planet_flag = ringworld_capital
						}
						set_owner = root
						#assign_leader = event_target:leader_governor
						remove_planet_flag = ringworld_capital
					}
					if = {
						limit = { any_planet = { has_planet_flag = temp_save } }
						every_system_planet = { 
							limit = {
								NOR = {
									is_star = yes
									is_ringworld = yes
								}
								has_planet_flag = temp_save
							}
							destroy_colony = yes
							remove_planet = yes 
						}
					}
					else = {
						every_system_planet = { 
							limit = {
								NOR = {
									is_star = yes
									is_ringworld = yes
								}
							}
							destroy_colony = yes
							remove_planet = yes 
						}
					}
					random_system_planet = {
						limit = {
							is_planet_class = pc_ringworld_habitable
							NOT = { is_capital = yes }
							NOR = {
								has_planet_flag = nongye
								has_planet_flag = gongye
								has_planet_flag = maoyi
							}
						}
						set_planet_flag = nongye
						set_name = "NAME_Agrarian_District"
						while = {
							count = 9
							random_tile = {
								limit = { has_building = no has_blocker = no }
								set_deposit = d_rich_farmland_deposit					
							}
						}
						while = {
							count = 22
							random_tile = {
								limit = { has_building = no has_blocker = no has_pop = no }			
								set_blocker = tb_ancient_ruins
							}
						}
					}
					random_system_planet = {
						limit = {
							is_planet_class = pc_ringworld_habitable
							NOT = { is_capital = yes }
							NOR = {
								has_planet_flag = nongye
								has_planet_flag = gongye
								has_planet_flag = maoyi
							}
						}
						set_planet_flag = gongye
						set_name = "NAME_Industrial_District"
						while = {
							count = 9
							random_tile = {
								limit = { has_building = no has_blocker = no }
								set_deposit = d_rich_mineral_deposit					
							}
						}
						while = {
							count = 22
							random_tile = {
								limit = { has_building = no has_blocker = no has_pop = no }			
								set_blocker = tb_ancient_ruins
							}
						}
					}
					random_system_planet = {
						limit = {
							is_planet_class = pc_ringworld_habitable
							NOT = { is_capital = yes }
							NOR = {
								has_planet_flag = nongye
								has_planet_flag = gongye
								has_planet_flag = maoyi
							}
						}
						set_planet_flag = maoyi
						set_name = "NAME_Trade_District"
						while = {
							count = 9
							random_tile = {
								limit = { has_building = no has_blocker = no }
								set_deposit = d_rich_energy_deposit
							}
						}
						while = {
							count = 22
							random_tile = {
								limit = { has_building = no has_blocker = no has_pop = no }			
								set_blocker = tb_ancient_ruins
							}
						}
					}
					every_system_planet = {
						remove_planet_flag = nongye
						remove_planet_flag = gongye
						remove_planet_flag = maoyi
					}
				}
			}
			every_planet_within_border = {
				limit = {
					is_ringworld = yes
					has_deposit_for = shipclass_mining_station 
					has_mining_station = no
				}
				create_mining_station = {
					owner = ROOT
				}
			}
			every_planet_within_border = {
				limit = {
					is_ringworld = yes
					has_deposit_for = shipclass_research_station 
					has_research_station = no
				}
				create_research_station = {
					owner = ROOT
				}
			}
			if = {
				limit = { has_valid_civic = civic_advanced_start }
				every_owned_planet = {
					limit = { is_capital = no }
					every_tile = {
						limit = { has_pop = yes }
						kill_pop = yes
						create_pop = {
							species = owner_species
							ethos = random
						}
					}
				}
				every_owned_planet = {
					limit = { is_capital = yes }
					every_tile = {
						remove_blocker = yes
					}
					planet_event = { id = game_start.20 }
					planet_event = { id = game_start.22 }
					planet_event = { id = game_start.23 }
				}
			}
		}
	}
}

country_event = {
	id = civic_events.1
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_country_type = default
		NOT = { has_valid_civic = civic_ringworld_start }
	}
	immediate = {
		capital_scope = {
			solar_system = {
				random_system_planet = {
					limit = { is_ringworld = yes is_capital = no }
					save_event_target_as = has_ringworld
				}
			}
		}
		if = {
			limit = {
				OR = {
					capital_scope = {
						is_ringworld = yes
					}
					exists = event_target:has_ringworld
				}
			}
			every_owned_planet = {
				every_tile = {
					remove_building = yes
				}
				every_owned_pop = {
					kill_pop = yes
				}
				destroy_colony = yes
			}
		}
	}
}

country_event = {
	id = civic_events.2
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_country_type = default
		has_valid_civic = civic_synthetic_evolution
	}
	immediate = {
		add_food = -100
		every_owned_planet ={
			every_planet_army = { remove_army = yes }
		}
		random_owned_planet ={
			every_tile = {
				limit = { has_building = building_hydroponics_farm_1 }
				remove_building = yes
				set_building = building_power_plant_1
				clear_deposits = yes
				set_deposit = d_energy_deposit
			}
			every_tile = {
				limit = { has_deposit = d_farmland_deposit }
				clear_deposits = yes
				set_deposit = d_energy_deposit
			}
			every_tile = {
				limit = { has_deposit = d_rich_farmland_deposit }
				clear_deposits = yes
				set_deposit = d_rich_energy_deposit
			}
			every_tile = {
				limit = { has_deposit = d_vast_farmland_deposit }
				clear_deposits = yes
				set_deposit = d_vast_energy_deposit
			}
			every_tile = {
				limit = { has_deposit = d_immense_farmland_deposit }
				clear_deposits = yes
				set_deposit = d_immense_energy_deposit
			}
			every_tile = {
				limit = { has_deposit = d_mineral_food_deposit }
				clear_deposits = yes
				set_deposit = d_mineral_deposit
			}
			every_tile = {
				limit = { has_deposit = d_rich_food_mineral_deposit }
				clear_deposits = yes
				set_deposit = d_rich_mineral_deposit
			}
			create_army = {
				owner = root
				species = root.species
				type = "synthetic_defense_army"
			}
			create_army = {
				owner = root
				species = root.species
				type = "synthetic_defense_army"
			}
			create_army = {
				owner = root
				species = root.species
				type = "synthetic_defense_army"
			}
		}
		set_country_flag = synthetic_empire
		set_country_flag = synthetic_age
		add_research_option = tech_robomodding
		add_research_option = tech_robomodding_m
		add_research_option = tech_binary_motivators
		add_research_option = tech_nanite_assemblers
		add_research_option = tech_robomodding_points_1
		add_research_option = tech_robomodding_points_2
		give_technology = { tech = tech_cryostasis_1 message = no }
		give_technology = { tech = tech_cryostasis_2 message = no }
		give_technology = { tech = tech_automated_exploration message = no }
		give_technology = { tech = tech_powered_exoskeletons message = no }
		give_technology = { tech = tech_administrative_ai message = no }
		give_technology = { tech = tech_self_aware_logic message = no }
		give_technology = { tech = tech_auxiliary_fire_control message = no }
		give_technology = { tech = tech_sapient_ai message = no }
		give_technology = { tech = tech_robotic_workers message = no }
		give_technology = { tech = tech_droid_workers message = no }
		give_technology = { tech = tech_synthetic_workers message = no }
		give_technology = { tech = tech_synthetic_leaders message = no }
		give_technology = { tech = tech_combat_computers_1 message = no }
		give_technology = { tech = tech_combat_computers_2 message = no }
		give_technology = { tech = tech_combat_computers_3 message = no }
		owner_species = { save_event_target_as = species_homeworld }
		create_species = {
			#is_mod = yes
			name = this
			namelist = this
			plural = this
			class = "ROBOT"
			#portrait = "default_robot"
			portrait = this
			traits = this
			homeworld = event_target:species_homeworld
			new_pop_resource_requirement = {
				type = robot_food
				value = 30.0
			}
			pops_auto_growth = 1.0
			
			pops_can_be_colonizers = yes
			pops_can_migrate = yes
			pops_can_reproduce = no
			pops_can_join_factions = yes
			pop_maintenance = 1
			can_generate_leaders = yes
			pops_can_be_slaves = yes
			pops_have_happiness = yes
			pop_ethics = random
		}
		every_owned_pop = {
			limit = { is_same_species = event_target:species_homeworld }
			change_species = last_created
		}
		every_owned_leader = {
			limit = { is_same_species = event_target:species_homeworld }
			change_species = last_created
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = { is_same_species = event_target:species_homeworld }
			change_species = last_created
			change_leader_portrait = species
		}
		change_dominant_species = { species = last_created }
		if = {
			limit = { root = { has_valid_civic = civic_advanced_start } }
			random_owned_pop = {
				limit = { NOT = { is_same_species = root } }
				species = { save_event_target_as = worker }
			}
			every_owned_planet ={
				limit = { is_capital = no }
				every_tile = {
					limit = { has_building = building_hydroponics_farm_1 }
					remove_building = yes
					set_building = building_power_plant_1
					clear_deposits = yes
					set_deposit = d_energy_deposit
				}
				every_tile = {
					limit = { has_deposit = d_farmland_deposit }
					clear_deposits = yes
					set_deposit = d_energy_deposit
				}
				every_tile = {
					limit = { has_deposit = d_rich_farmland_deposit }
					clear_deposits = yes
					set_deposit = d_rich_energy_deposit
				}
				every_tile = {
					limit = { has_deposit = d_vast_farmland_deposit }
					clear_deposits = yes
					set_deposit = d_vast_energy_deposit
				}
				every_tile = {
					limit = { has_deposit = d_immense_farmland_deposit }
					clear_deposits = yes
					set_deposit = d_immense_energy_deposit
				}
				every_tile = {
					limit = { has_deposit = d_mineral_food_deposit }
					clear_deposits = yes
					set_deposit = d_mineral_deposit
				}
				every_tile = {
					limit = { has_deposit = d_rich_food_mineral_deposit }
					clear_deposits = yes
					set_deposit = d_rich_mineral_deposit
				}
				every_tile = {
					limit = {
						OR = {
							has_building = building_hydroponics_farm_1
							has_building = building_mining_network_1
						}
					}
					pop = {
						change_species = event_target:worker
						clear_ethos = yes
					}
				}
			}
		}
		set_policy = { policy = artificial_intelligence_policy option = ai_full_rights cooldown = no }
	}
}

planet_event = {
	id = civic_events.3
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		owner = {
			has_valid_civic = civic_synthetic_evolution
			is_country_type = default
		}
	}
	immediate = {
		#if = {
			#limit = { owner = { has_valid_civic = civic_synthetic_evolution } }
			owner = { add_modifier = { modifier = civic_synthetic_evolution days = -1 } }
			from = {
				save_event_target_as = homeworld_sec_species
				create_species = {
					name = this
					plural = this
					namelist = this
					class = MACHINE
					portrait = this
					traits = this
					homeworld = event_target:homeworld_sec_species
					new_pop_resource_requirement = {
						type = robot_food 
						value = 30.0
					}
					pops_auto_growth = 1.0
					pops_can_reproduce = no
					pops_can_join_factions = no
					pop_maintenance = 1
					can_generate_leaders = no
					pops_have_happiness = no
					consumer_goods = no
					pop_ethics = no
					effect = {
						save_event_target_as = secondary_species
					}
				}
			}
			while = {
				count = 2
				random_tile = {
					limit = { has_building = building_mining_network_1 has_pop = no }
					create_pop = {
						species = event_target:secondary_species
					}
				}
			}
		#}
		root.owner = {
			set_policy = { policy = artificial_intelligence_policy option = ai_full_rights cooldown = no }
		}
	}
}

country_event = {
	id = civic_events.4
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_country_type = default
		has_valid_civic = civic_transcendence
	}
	immediate = {
		set_country_flag = civic_transcendence
		random_country = {
			limit = { is_country_type = shroud }
			save_event_target_as = the_shroud
		}
		establish_communications_no_message = event_target:the_shroud
		set_country_flag = researched_tech_telepathy
		give_technology = { tech = tech_psionic_theory message = no }
		give_technology = { tech = tech_telepathy message = no }
		give_technology = { tech = tech_holographic_rituals message = no }
		give_technology = { tech = tech_consecration_fields message = no }
		give_technology = { tech = tech_transcendent_faith message = no }
		add_research_option = tech_psi_jump_drive_1
		add_research_option = tech_psionic_shield
		country_event = { id = civic_events.6 days = 20 random = 20 }
	}
}

country_event = {
	id = civic_events.5
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_country_type = default
		has_valid_civic = civic_evolutionary_mastery
	}
	immediate = {
		add_modifier = { modifier = civic_evolutionary_mastery days = -1 }
		give_technology = { tech = tech_hydroponics message = no }
		give_technology = { tech = tech_gene_crops message = no }
		give_technology = { tech = tech_nano_vitality_crops message = no }
		give_technology = { tech = tech_nutrient_replication message = no }
		give_technology = { tech = tech_frontier_health message = no }
		give_technology = { tech = tech_frontier_hospital message = no }
		give_technology = { tech = tech_genome_mapping message = no }
		give_technology = { tech = tech_epigenetic_triggers message = no }
		give_technology = { tech = tech_cloning message = no }
		give_technology = { tech = tech_gene_banks message = no }
		give_technology = { tech = tech_glandular_acclimation message = no }
		give_technology = { tech = tech_gene_expressions message = no }
		give_technology = { tech = tech_selected_lineages message = no }
		give_technology = { tech = tech_capacity_boosters message = no }
		give_technology = { tech = tech_subdermal_stimulation message = no }
		give_technology = { tech = tech_morphogenetic_field_mastery message = no }
		give_technology = { tech = tech_gene_tailoring message = no }
		give_technology = { tech = tech_gene_seed_purification message = no }
		give_technology = { tech = tech_genetic_resequencing message = no }
	}
}

country_event = {
	id = civic_events.6
	title = "utopia.3000.name"
	desc = utopia.3000.intro.desc
	diplomatic = yes
	force_open = yes
	
	picture_event_data = {
		portrait = shroud1
		room = shroud_room
	}
	
	is_triggered_only = yes

	immediate = {
		set_country_flag = shroud_diplomacy_engaged
		set_country_flag = shroud_intro
	}

	after = {
		hidden_effect = {
			country_event = { id = civic_events.7 }
		}
	}

	option = {
		name = "utopia.3000.a"

		hidden_effect = {
			random_list = {
				90 = {
					add_modifier = {
						modifier = "shroud_happiness"
						days = 1800
					}
				}
				10 = {}
			}
			random_list = {
				90 = {
					add_modifier = {
						modifier = "shroud_research_speed"
						days = 1800
					}
				}
				10 = {}
			}
			random_list = {
				90 = {
					add_modifier = {
						modifier = "shroud_influence_boost"
						days = 1800
					}
				}
				10 = {}
			}
			random_list = {
				90 = {
					add_modifier = {
						modifier = "shroud_unity_boost"
						days = 1800
					}
				}
				10 = {}
			}
			random_list = {
				90 = {
					add_modifier = {
						modifier = "shroud_ethic_boost"
						days = 1800
					}
				}
				10 = {}
			}
			add_modifier = {
				modifier = "shroud_cooldown"
				days = 1800
			}
		}
	}
	option = {
		name = "exit.shroud"
		custom_tooltip = "exit.shroud.tooltip"
		default_hide_option = yes
	}
}

country_event = {
	id = civic_events.7
	title = "boon.bestowed"
	desc = utopia.3000.10.desc
	diplomatic = yes
	force_open = yes
	
	picture_event_data = {
		portrait = shroud1
		room = shroud_room
	}
	is_triggered_only = yes
	after = {
		hidden_effect = {
			remove_country_flag = shroud_diplomacy_engaged
			remove_country_flag = shroud_intro
		}
	}
	option = {
		name = "exit.shroud"
		default_hide_option = yes
	}
}

event = {
	id = civic_events.8
	
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		every_playable_country = {
			limit = {
				is_ai = yes
				has_valid_civic = civic_synthetic_evolution
			}
			every_owned_pop = {
				limit = { is_species_class = MACHINE }
				set_citizenship_type = { country = prev type = citizenship_full_machine cooldown = no }
			}
		}
	}
}

country_event = {
	id = civic_events.9
	
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = default
		OR = {
			has_valid_civic = civic_machine_worlds_1
			has_valid_civic = civic_machine_worlds_2
		}
	}
	immediate = {
		capital_scope = {
			if = {
				limit = { root.owner = { has_valid_civic = civic_synthetic_evolution } }
				random_owned_pop = {
					limit = { NOT = { is_same_species = root.owner } }
					species = { save_event_target_as = worker }
				}
			}
			set_planet_size = 25
			reroll_deposits = yes
			every_tile = { remove_blocker = yes }
			reset_start_buildings_and_blockers_post_apoc = yes
			every_tile = {
				limit = { has_pop = yes }
				kill_pop = yes
			}
			every_tile = { remove_blocker = yes }
			every_tile = {
				limit = { has_building = building_hydroponics_farm_1 }
				remove_building = yes
				set_building = building_power_plant_1
				clear_deposits = yes
			}
			if = {
				limit = { root.owner = { has_valid_civic = civic_synthetic_evolution } }
				every_tile = {
					limit = { has_building = building_mining_network_1 }
					create_pop = { species = event_target:worker }
				}
				every_tile = {
					limit = { has_building = yes has_pop = no }
					create_pop = { species = root.owner }
				}
			}
			else = {
				every_tile = {
					limit = { has_building = yes }
					create_pop = { species = root }
				}
			}
			every_tile = {
				limit = {
					OR = {
						has_deposit = d_farmland_deposit
						has_deposit = d_rich_farmland_deposit
						has_deposit = d_vast_farmland_deposit
						has_deposit = d_immense_farmland_deposit
					}
				}
				clear_deposits = yes
			}
			change_pc = pc_machine
			while = {
				count = 16
				random_tile = {
					limit = { has_blocker = no has_building = no has_pop = no }
					set_blocker = "tb_former_battlefield"
				}
			}
		}
	}
}